// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 25NMkq6j3WJSA86YLeNnNv
// Component: zhQeo8wH71P6

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RichRemixNavLink from "../../RichRemixNavLink"; // plasmic-import: IU0oVQQU8Igi/component

import {
  ThemeValue,
  useTheme
} from "../component_library/PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_component_library_css from "../component_library/plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 25NMkq6j3WJSA86YLeNnNv/projectcss
import sty from "./PlasmicFinpacMobileHeaderGroup.module.css"; // plasmic-import: zhQeo8wH71P6/css

import CaretDownSvgIcon from "./icons/PlasmicIcon__CaretDownSvg"; // plasmic-import: iD9qZMGhfyt-/icon
import CaretUpSvgIcon from "./icons/PlasmicIcon__CaretUpSvg"; // plasmic-import: h2MGQmM0O6PM/icon

createPlasmicElementProxy;

export type PlasmicFinpacMobileHeaderGroup__VariantMembers = {
  opened: "opened";
  noSubMenu: "noSubMenu";
};
export type PlasmicFinpacMobileHeaderGroup__VariantsArgs = {
  opened?: SingleBooleanChoiceArg<"opened">;
  noSubMenu?: SingleBooleanChoiceArg<"noSubMenu">;
};
type VariantPropType = keyof PlasmicFinpacMobileHeaderGroup__VariantsArgs;
export const PlasmicFinpacMobileHeaderGroup__VariantProps =
  new Array<VariantPropType>("opened", "noSubMenu");

export type PlasmicFinpacMobileHeaderGroup__ArgsType = {
  sectionTitle?: string;
  links?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFinpacMobileHeaderGroup__ArgsType;
export const PlasmicFinpacMobileHeaderGroup__ArgProps = new Array<ArgPropType>(
  "sectionTitle",
  "links"
);

export type PlasmicFinpacMobileHeaderGroup__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<"button">;
  text?: Flex__<"div">;
  svg?: Flex__<"svg">;
  freeBox?: Flex__<"div">;
};

export interface DefaultFinpacMobileHeaderGroupProps {
  sectionTitle?: string;
  links?: React.ReactNode;
  opened?: SingleBooleanChoiceArg<"opened">;
  noSubMenu?: SingleBooleanChoiceArg<"noSubMenu">;
  className?: string;
}

const $$ = {};

function PlasmicFinpacMobileHeaderGroup__RenderFunc(props: {
  variants: PlasmicFinpacMobileHeaderGroup__VariantsArgs;
  args: PlasmicFinpacMobileHeaderGroup__ArgsType;
  overrides: PlasmicFinpacMobileHeaderGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          sectionTitle: "Section Title"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "opened",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.opened
      },
      {
        path: "noSubMenu",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noSubMenu
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_component_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_component_library_css.global_theme_finpac]: hasVariant(
            globalVariants,
            "theme",
            "finpac"
          ),
          [sty.rootnoSubMenu]: hasVariant($state, "noSubMenu", "noSubMenu"),
          [sty.rootopened]: hasVariant($state, "opened", "opened")
        }
      )}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(projectcss.all, projectcss.button, sty.button)}
        onClick={async event => {
          const $steps = {};

          $steps["updateOpened"] = true
            ? (() => {
                const actionArgs = {
                  vgroup: "opened",
                  operation: 2,
                  value: "opened"
                };
                return (({ vgroup, value }) => {
                  if (typeof value === "string") {
                    value = [value];
                  }

                  const oldValue = $stateGet($state, vgroup);
                  $stateSet($state, vgroup, !oldValue);
                  return !oldValue;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateOpened"] != null &&
            typeof $steps["updateOpened"] === "object" &&
            typeof $steps["updateOpened"].then === "function"
          ) {
            $steps["updateOpened"] = await $steps["updateOpened"];
          }
        }}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textnoSubMenu]: hasVariant($state, "noSubMenu", "noSubMenu")
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.sectionTitle;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Equipment Vendors";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <PlasmicIcon__
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant($state, "opened", "opened")
              ? CaretUpSvgIcon
              : CaretDownSvgIcon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgnoSubMenu]: hasVariant($state, "noSubMenu", "noSubMenu"),
            [sty.svgopened]: hasVariant($state, "opened", "opened")
          })}
          role={"img"}
        />
      </button>
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxopened]: hasVariant($state, "opened", "opened")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__sAt7E
                )}
                fontWeight={"bold"}
                hoverColor={"gray"}
                linkText={"Explore Section Title"}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__ghg3
                )}
                fontWeight={"bold"}
                hoverColor={"gray"}
                linkText={"Submenu Link"}
              />
            </React.Fragment>
          ),
          value: args.links
        })}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "text", "svg", "freeBox"],
  button: ["button", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: "button";
  text: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinpacMobileHeaderGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinpacMobileHeaderGroup__VariantsArgs;
    args?: PlasmicFinpacMobileHeaderGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFinpacMobileHeaderGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFinpacMobileHeaderGroup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinpacMobileHeaderGroup__ArgProps,
          internalVariantPropNames: PlasmicFinpacMobileHeaderGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinpacMobileHeaderGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinpacMobileHeaderGroup";
  } else {
    func.displayName = `PlasmicFinpacMobileHeaderGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicFinpacMobileHeaderGroup = Object.assign(
  // Top-level PlasmicFinpacMobileHeaderGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFinpacMobileHeaderGroup
    internalVariantProps: PlasmicFinpacMobileHeaderGroup__VariantProps,
    internalArgProps: PlasmicFinpacMobileHeaderGroup__ArgProps
  }
);

export default PlasmicFinpacMobileHeaderGroup;
/* prettier-ignore-end */
