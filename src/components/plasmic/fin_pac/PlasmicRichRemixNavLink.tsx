// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 25NMkq6j3WJSA86YLeNnNv
// Component: IU0oVQQU8Igi

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RemixNavLink } from "~/components/RemixNavLink"; // plasmic-import: oQKYG6pB_vQ8/codeComponent

import {
  ThemeValue,
  useTheme
} from "../component_library/PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_component_library_css from "../component_library/plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 25NMkq6j3WJSA86YLeNnNv/projectcss
import sty from "./PlasmicRichRemixNavLink.module.css"; // plasmic-import: IU0oVQQU8Igi/css

createPlasmicElementProxy;

export type PlasmicRichRemixNavLink__VariantMembers = {
  hoverColor: "none" | "gray";
  underlineOnHover: "underlineOnHover";
  fontWeight: "normal" | "medium" | "bold" | "extraBold";
  fontColor: "black" | "themeLinkColor" | "white";
};
export type PlasmicRichRemixNavLink__VariantsArgs = {
  hoverColor?: SingleChoiceArg<"none" | "gray">;
  underlineOnHover?: SingleBooleanChoiceArg<"underlineOnHover">;
  fontWeight?: SingleChoiceArg<"normal" | "medium" | "bold" | "extraBold">;
  fontColor?: SingleChoiceArg<"black" | "themeLinkColor" | "white">;
};
type VariantPropType = keyof PlasmicRichRemixNavLink__VariantsArgs;
export const PlasmicRichRemixNavLink__VariantProps = new Array<VariantPropType>(
  "hoverColor",
  "underlineOnHover",
  "fontWeight",
  "fontColor"
);

export type PlasmicRichRemixNavLink__ArgsType = {
  href?: string;
  isResourceRoute?: boolean;
  linkText?: string;
};
type ArgPropType = keyof PlasmicRichRemixNavLink__ArgsType;
export const PlasmicRichRemixNavLink__ArgProps = new Array<ArgPropType>(
  "href",
  "isResourceRoute",
  "linkText"
);

export type PlasmicRichRemixNavLink__OverridesType = {
  root?: Flex__<"div">;
  remixNavLink?: Flex__<typeof RemixNavLink>;
  text?: Flex__<"div">;
};

export interface DefaultRichRemixNavLinkProps {
  href?: string;
  isResourceRoute?: boolean;
  linkText?: string;
  hoverColor?: SingleChoiceArg<"none" | "gray">;
  underlineOnHover?: SingleBooleanChoiceArg<"underlineOnHover">;
  fontWeight?: SingleChoiceArg<"normal" | "medium" | "bold" | "extraBold">;
  fontColor?: SingleChoiceArg<"black" | "themeLinkColor" | "white">;
  className?: string;
}

const $$ = {};

function PlasmicRichRemixNavLink__RenderFunc(props: {
  variants: PlasmicRichRemixNavLink__VariantsArgs;
  args: PlasmicRichRemixNavLink__ArgsType;
  overrides: PlasmicRichRemixNavLink__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          href: "/",
          isResourceRoute: false,
          linkText: "Link"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "hoverColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hoverColor
      },
      {
        path: "underlineOnHover",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.underlineOnHover
      },
      {
        path: "fontWeight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fontWeight
      },
      {
        path: "fontColor",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.fontColor
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_component_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_component_library_css.global_theme_finpac]: hasVariant(
            globalVariants,
            "theme",
            "finpac"
          ),
          [sty.roothoverColor_gray]: hasVariant($state, "hoverColor", "gray"),
          [sty.rootunderlineOnHover_fontColor_themeLinkColor]:
            hasVariant($state, "underlineOnHover", "underlineOnHover") &&
            hasVariant($state, "fontColor", "themeLinkColor"),
          [sty.rootunderlineOnHover_hoverColor_gray]:
            hasVariant($state, "hoverColor", "gray") &&
            hasVariant($state, "underlineOnHover", "underlineOnHover")
        }
      )}
    >
      <RemixNavLink
        data-plasmic-name={"remixNavLink"}
        data-plasmic-override={overrides.remixNavLink}
        className={classNames("__wab_instance", sty.remixNavLink)}
        href={(() => {
          try {
            return $props.href;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        isResourceRoute={(() => {
          try {
            return $props.isResourceRoute;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textfontColor_themeLinkColor]: hasVariant(
                $state,
                "fontColor",
                "themeLinkColor"
              ),
              [sty.textfontColor_white]: hasVariant(
                $state,
                "fontColor",
                "white"
              ),
              [sty.textfontWeight_bold]: hasVariant(
                $state,
                "fontWeight",
                "bold"
              ),
              [sty.textfontWeight_extraBold]: hasVariant(
                $state,
                "fontWeight",
                "extraBold"
              ),
              [sty.textfontWeight_medium]: hasVariant(
                $state,
                "fontWeight",
                "medium"
              ),
              [sty.texthoverColor_gray]: hasVariant(
                $state,
                "hoverColor",
                "gray"
              ),
              [sty.textunderlineOnHover]: hasVariant(
                $state,
                "underlineOnHover",
                "underlineOnHover"
              ),
              [sty.textunderlineOnHover_fontColor_themeLinkColor]:
                hasVariant($state, "underlineOnHover", "underlineOnHover") &&
                hasVariant($state, "fontColor", "themeLinkColor"),
              [sty.textunderlineOnHover_hoverColor_gray]:
                hasVariant($state, "hoverColor", "gray") &&
                hasVariant($state, "underlineOnHover", "underlineOnHover")
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.linkText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Link";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
      </RemixNavLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "remixNavLink", "text"],
  remixNavLink: ["remixNavLink", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  remixNavLink: typeof RemixNavLink;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRichRemixNavLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRichRemixNavLink__VariantsArgs;
    args?: PlasmicRichRemixNavLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRichRemixNavLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRichRemixNavLink__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRichRemixNavLink__ArgProps,
          internalVariantPropNames: PlasmicRichRemixNavLink__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRichRemixNavLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRichRemixNavLink";
  } else {
    func.displayName = `PlasmicRichRemixNavLink.${nodeName}`;
  }
  return func;
}

export const PlasmicRichRemixNavLink = Object.assign(
  // Top-level PlasmicRichRemixNavLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    remixNavLink: makeNodeComponent("remixNavLink"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicRichRemixNavLink
    internalVariantProps: PlasmicRichRemixNavLink__VariantProps,
    internalArgProps: PlasmicRichRemixNavLink__ArgProps
  }
);

export default PlasmicRichRemixNavLink;
/* prettier-ignore-end */
