// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 25NMkq6j3WJSA86YLeNnNv
// Component: mdPVtXO7YcPY

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RemixNavLink } from "~/components/RemixNavLink"; // plasmic-import: oQKYG6pB_vQ8/codeComponent

import {
  ThemeValue,
  useTheme
} from "../component_library/PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_component_library_css from "../component_library/plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 25NMkq6j3WJSA86YLeNnNv/projectcss
import sty from "./PlasmicHeaderNavLink.module.css"; // plasmic-import: mdPVtXO7YcPY/css

createPlasmicElementProxy;

export type PlasmicHeaderNavLink__VariantMembers = {
  noDropdown: "noDropdown";
  designMode: "designMode";
  mobileView: "mobileView";
};
export type PlasmicHeaderNavLink__VariantsArgs = {
  noDropdown?: SingleBooleanChoiceArg<"noDropdown">;
  designMode?: SingleBooleanChoiceArg<"designMode">;
  mobileView?: SingleBooleanChoiceArg<"mobileView">;
};
type VariantPropType = keyof PlasmicHeaderNavLink__VariantsArgs;
export const PlasmicHeaderNavLink__VariantProps = new Array<VariantPropType>(
  "noDropdown",
  "designMode",
  "mobileView"
);

export type PlasmicHeaderNavLink__ArgsType = {
  dropdownLinks?: React.ReactNode;
  linkText?: string;
  href?: string;
};
type ArgPropType = keyof PlasmicHeaderNavLink__ArgsType;
export const PlasmicHeaderNavLink__ArgProps = new Array<ArgPropType>(
  "dropdownLinks",
  "linkText",
  "href"
);

export type PlasmicHeaderNavLink__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  remixNavLink?: Flex__<typeof RemixNavLink>;
  text?: Flex__<"div">;
};

export interface DefaultHeaderNavLinkProps {
  dropdownLinks?: React.ReactNode;
  linkText?: string;
  href?: string;
  noDropdown?: SingleBooleanChoiceArg<"noDropdown">;
  designMode?: SingleBooleanChoiceArg<"designMode">;
  mobileView?: SingleBooleanChoiceArg<"mobileView">;
  className?: string;
}

const $$ = {};

function PlasmicHeaderNavLink__RenderFunc(props: {
  variants: PlasmicHeaderNavLink__VariantsArgs;
  args: PlasmicHeaderNavLink__ArgsType;
  overrides: PlasmicHeaderNavLink__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          linkText: "Nav Link",
          href: "/"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "noDropdown",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noDropdown
      },
      {
        path: "designMode",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.designMode
      },
      {
        path: "mobileView",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.mobileView
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_component_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_component_library_css.global_theme_finpac]: hasVariant(
            globalVariants,
            "theme",
            "finpac"
          ),
          [plasmic_component_library_css.global_theme_umpquaBank]: hasVariant(
            globalVariants,
            "theme",
            "umpquaBank"
          ),
          [sty.rootdesignMode]: hasVariant($state, "designMode", "designMode"),
          [sty.rootmobileView]: hasVariant($state, "mobileView", "mobileView"),
          [sty.rootnoDropdown]: hasVariant($state, "noDropdown", "noDropdown")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxmobileView]: hasVariant(
            $state,
            "mobileView",
            "mobileView"
          )
        })}
      >
        <RemixNavLink
          data-plasmic-name={"remixNavLink"}
          data-plasmic-override={overrides.remixNavLink}
          className={classNames("__wab_instance", sty.remixNavLink, {
            [sty.remixNavLinkdesignMode]: hasVariant(
              $state,
              "designMode",
              "designMode"
            )
          })}
          href={(() => {
            try {
              return $props.href;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textdesignMode]: hasVariant(
                  $state,
                  "designMode",
                  "designMode"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.linkText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Click me!";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </RemixNavLink>
        {(
          hasVariant($state, "noDropdown", "noDropdown") && triggers.hover_root
            ? false
            : triggers.hover_root
            ? true
            : hasVariant($state, "mobileView", "mobileView")
            ? true
            : hasVariant($state, "designMode", "designMode")
            ? true
            : hasVariant($state, "noDropdown", "noDropdown")
            ? false
            : false
        )
          ? renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(projectcss.all, sty.freeBox___7GjKl)}
                  tabIndex={0}
                >
                  <RemixNavLink
                    className={classNames(
                      "__wab_instance",
                      sty.remixNavLink__b6AtD
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__muiVq
                      )}
                    >
                      {"Click me!"}
                    </div>
                  </RemixNavLink>
                  <RemixNavLink
                    className={classNames(
                      "__wab_instance",
                      sty.remixNavLink___8SR1D
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y9X1H
                      )}
                    >
                      {"Click me!"}
                    </div>
                  </RemixNavLink>
                </div>
              ),
              value: args.dropdownLinks
            })
          : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "remixNavLink", "text"],
  freeBox: ["freeBox", "remixNavLink", "text"],
  remixNavLink: ["remixNavLink", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  remixNavLink: typeof RemixNavLink;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderNavLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderNavLink__VariantsArgs;
    args?: PlasmicHeaderNavLink__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderNavLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeaderNavLink__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderNavLink__ArgProps,
          internalVariantPropNames: PlasmicHeaderNavLink__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderNavLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeaderNavLink";
  } else {
    func.displayName = `PlasmicHeaderNavLink.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderNavLink = Object.assign(
  // Top-level PlasmicHeaderNavLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    remixNavLink: makeNodeComponent("remixNavLink"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHeaderNavLink
    internalVariantProps: PlasmicHeaderNavLink__VariantProps,
    internalArgProps: PlasmicHeaderNavLink__ArgProps
  }
);

export default PlasmicHeaderNavLink;
/* prettier-ignore-end */
