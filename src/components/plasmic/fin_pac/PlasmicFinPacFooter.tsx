// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 25NMkq6j3WJSA86YLeNnNv
// Component: rECoaLojDdMh

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FullWidthSection from "../../FullWidthSection"; // plasmic-import: CmKNratQvH0p/component
import CaResidentDisclosure from "../../CaResidentDisclosure"; // plasmic-import: VRsD0eEsuzxp/component
import RichRemixNavLink from "../../RichRemixNavLink"; // plasmic-import: IU0oVQQU8Igi/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbUtCbW4Cju4A } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BUtCbW4Cju4a/globalVariant
import {
  ThemeValue,
  useTheme
} from "../component_library/PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_component_library_css from "../component_library/plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 25NMkq6j3WJSA86YLeNnNv/projectcss
import sty from "./PlasmicFinPacFooter.module.css"; // plasmic-import: rECoaLojDdMh/css

createPlasmicElementProxy;

export type PlasmicFinPacFooter__VariantMembers = {
  caResidentsDisclosure: "caResidentsDisclosure";
};
export type PlasmicFinPacFooter__VariantsArgs = {
  caResidentsDisclosure?: SingleBooleanChoiceArg<"caResidentsDisclosure">;
};
type VariantPropType = keyof PlasmicFinPacFooter__VariantsArgs;
export const PlasmicFinPacFooter__VariantProps = new Array<VariantPropType>(
  "caResidentsDisclosure"
);

export type PlasmicFinPacFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFinPacFooter__ArgsType;
export const PlasmicFinPacFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFinPacFooter__OverridesType = {
  root?: Flex__<typeof FullWidthSection>;
  caResidentDisclosure?: Flex__<typeof CaResidentDisclosure>;
  columns?: Flex__<"div">;
};

export interface DefaultFinPacFooterProps {
  caResidentsDisclosure?: SingleBooleanChoiceArg<"caResidentsDisclosure">;
  className?: string;
}

const $$ = {};

function PlasmicFinPacFooter__RenderFunc(props: {
  variants: PlasmicFinPacFooter__VariantsArgs;
  args: PlasmicFinPacFooter__ArgsType;
  overrides: PlasmicFinPacFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "caResidentsDisclosure",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.caResidentsDisclosure
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbUtCbW4Cju4A(),
    theme: useTheme()
  });

  return (
    <FullWidthSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      background={"neutralLight"}
      className={classNames("__wab_instance", sty.root, {
        [sty.rootcaResidentsDisclosure]: hasVariant(
          $state,
          "caResidentsDisclosure",
          "caResidentsDisclosure"
        )
      })}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__dxGl3, {
          [sty.freeBoxcaResidentsDisclosure__dxGl3Ooiy2]: hasVariant(
            $state,
            "caResidentsDisclosure",
            "caResidentsDisclosure"
          )
        })}
      >
        <CaResidentDisclosure
          data-plasmic-name={"caResidentDisclosure"}
          data-plasmic-override={overrides.caResidentDisclosure}
          className={classNames("__wab_instance", sty.caResidentDisclosure, {
            [sty.caResidentDisclosurecaResidentsDisclosure]: hasVariant(
              $state,
              "caResidentsDisclosure",
              "caResidentsDisclosure"
            )
          })}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__eW7Xm)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mlALm)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ngZev
                )}
              >
                {"About"}
              </div>
              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__oDp4
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/about"}
                linkText={"About Us"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__ugW5Q
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/about/news"}
                linkText={"News"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__bO83
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/about/executive-profiles"}
                linkText={"Executive Profiles"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__w4Ydw
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/about/certified-lease-and-finance"}
                linkText={"Certified Lease and Finance Professionals"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__ki3Dc
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/about/careers"}
                linkText={"Careers"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__zml4X
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/about/faq"}
                linkText={"FAQ"}
                underlineOnHover={true}
              />
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__qzGzz)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1YiLd)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yx0LQ
                )}
              >
                {"3rd Party Originators"}
              </div>
              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__xJvu1
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/third-party-originators"}
                linkText={"Explore 3rd Party Originators"}
                underlineOnHover={true}
              />
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__iSTdE)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jxOe3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ehtvX
                )}
              >
                {"CUSTOMER CENTER"}
              </div>
              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__fn45V
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/customer-resource-center"}
                linkText={"Explore Customer Resource Center"}
                underlineOnHover={true}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8UA3O)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7TxKj
                )}
              >
                {"Business Owners"}
              </div>
              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__gFxpT
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/business-owners"}
                linkText={"Explore Business Owners"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__kEjHc
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/file/credit-application"}
                isResourceRoute={true}
                linkText={"Credit Application"}
                underlineOnHover={true}
              />
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column___9Nne)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yhsxI)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Vut5
                )}
              >
                {"Equipment Vendors"}
              </div>
              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__r5Lk
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/equipment-vendors"}
                linkText={"Explore Equipment Vendors"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__ovJol
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/equipment-vendors/more-information"}
                linkText={"Request More Information"}
                underlineOnHover={true}
              />

              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__uqIvw
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/equipment-vendors/faq"}
                linkText={"FAQ"}
                underlineOnHover={true}
              />
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__z29TE)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__miQok
                )}
              >
                {"Business Owners"}
              </div>
              <RichRemixNavLink
                className={classNames(
                  "__wab_instance",
                  sty.richRemixNavLink__qc8Rl
                )}
                fontColor={"themeLinkColor"}
                fontWeight={"bold"}
                href={"/business-owners"}
                linkText={"Explore Business Owners"}
                underlineOnHover={true}
              />
            </Stack__>
          </div>
        </Stack__>
        <div className={classNames(projectcss.all, sty.freeBox___9Gx)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0CCyg)}
          >
            <RichRemixNavLink
              className={classNames(
                "__wab_instance",
                sty.richRemixNavLink__u6DNj
              )}
              fontColor={"themeLinkColor"}
              fontWeight={"bold"}
              href={
                "https://www.umpquabank.com/privacy/consumer-privacy-notice/ "
              }
              linkText={"Privacy Policy"}
              underlineOnHover={true}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__svWkt
              )}
            >
              {"|"}
            </div>
            <RichRemixNavLink
              className={classNames(
                "__wab_instance",
                sty.richRemixNavLink___6JVPf
              )}
              fontColor={"themeLinkColor"}
              fontWeight={"bold"}
              href={
                "https://www.umpquabank.com/privacy/privacy-notice-for-california-residents/"
              }
              linkText={"CA Privacy Policy"}
              underlineOnHover={true}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wyZJd
              )}
            >
              {"|"}
            </div>
            <Embed
              className={classNames("__wab_instance", sty.embedHtml__wxfCp, {
                [sty.embedHtmlcaResidentsDisclosure__wxfCpooiy2]: hasVariant(
                  $state,
                  "caResidentsDisclosure",
                  "caResidentsDisclosure"
                )
              })}
              code={
                hasVariant(globalVariants, "screen", "mediumScreen")
                  ? "<a id=\"ot-sdk-btn\" class=\"ot-sdk-show-settings\" style=\"color: #0075d1; font-size: 16px; font-family: elza; font-weight: 600; border: 0; padding: 0; padding-top: 6px; text-decoration: none;\" onmouseover=\"this.style.backgroundColor='transparent'; this.style.textDecoration='underline'; this.style.cursor='pointer'\" onmouseout=\"this.style.backgroundColor='initial'; this.style.textDecoration='none'; this.style.cursor='default'\">Manage my cookie preferences</a>"
                  : "<a id=\"ot-sdk-btn\" class=\"ot-sdk-show-settings\" style=\"color: #3D808A; font-size: 16px; font-family: elza; font-weight: 600; border: 0; padding: 0; padding-top: 6px; text-decoration: none;\" onmouseover=\"this.style.backgroundColor='transparent'; this.style.textDecoration='underline'; this.style.cursor='pointer'\" onmouseout=\"this.style.backgroundColor='initial'; this.style.textDecoration='none'; this.style.cursor='default'\">Manage my cookie preferences</a>"
              }
            />
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wwhZm
            )}
          >
            {
              "Financial Pacific Leasing, Inc., including its divisions, is a subsidiary of Umpqua Bank.\n\nProducts offered by Financial Pacific Leasing, Inc. are not FDIC insured."
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1O9Bf
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return `©${new Date().getFullYear()} Financial Pacific Leasing, Inc.`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u00a92023 Financial Pacific";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <Embed
          className={classNames("__wab_instance", sty.embedHtml__ajfu4)}
          code={
            '<!-- OneTrust Cookies Consent Notice start for locations.umpquabank.com -->\n \n<script src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js"  type="text/javascript" charset="UTF-8" data-domain-script="018e8b17-3eb9-7f5c-839c-7e3129f32d7b" ></script>\n<script type="text/javascript">\nfunction OptanonWrapper() { }\n</script>\n<!-- OneTrust Cookies Consent Notice end for locations.umpquabank.com -->'
          }
        />

        <Embed
          className={classNames("__wab_instance", sty.embedHtml__zoDa)}
          code={
            "<!-- Google tag (gtag.js) --> <script async src=\"https://www.googletagmanager.com/gtag/js?id=G-71NWBM4FD6\"></script> <script> \u00a0 window.dataLayer = window.dataLayer || []; \u00a0 function gtag(){dataLayer.push(arguments);} \u00a0 gtag('js', new Date()); \u00a0 gtag('config', 'G-71NWBM4FD6'); </script>"
          }
        />
      </div>
    </FullWidthSection>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "caResidentDisclosure", "columns"],
  caResidentDisclosure: ["caResidentDisclosure"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof FullWidthSection;
  caResidentDisclosure: typeof CaResidentDisclosure;
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinPacFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinPacFooter__VariantsArgs;
    args?: PlasmicFinPacFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFinPacFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFinPacFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinPacFooter__ArgProps,
          internalVariantPropNames: PlasmicFinPacFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinPacFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinPacFooter";
  } else {
    func.displayName = `PlasmicFinPacFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFinPacFooter = Object.assign(
  // Top-level PlasmicFinPacFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    caResidentDisclosure: makeNodeComponent("caResidentDisclosure"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicFinPacFooter
    internalVariantProps: PlasmicFinPacFooter__VariantProps,
    internalArgProps: PlasmicFinPacFooter__ArgProps
  }
);

export default PlasmicFinPacFooter;
/* prettier-ignore-end */
