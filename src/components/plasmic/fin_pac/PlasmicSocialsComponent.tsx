// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 25NMkq6j3WJSA86YLeNnNv
// Component: 5noYeXZY46y8

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0CdGcjBJJJ2u/component

import {
  ThemeValue,
  useTheme
} from "../component_library/PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_component_library_css from "../component_library/plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 25NMkq6j3WJSA86YLeNnNv/projectcss
import sty from "./PlasmicSocialsComponent.module.css"; // plasmic-import: 5noYeXZY46y8/css

import IconIcon from "../component_library/icons/PlasmicIcon__Icon"; // plasmic-import: UBqKCOeBv1Lc/icon
import BrandInstagramSvgIcon from "./icons/PlasmicIcon__BrandInstagramSvg"; // plasmic-import: mGpoy7tQV_bd/icon
import Icon2Icon from "../component_library/icons/PlasmicIcon__Icon2"; // plasmic-import: InBie9uiW3NB/icon
import BrandLinkedinSvgIcon from "./icons/PlasmicIcon__BrandLinkedinSvg"; // plasmic-import: 7eQNhmZWjTSL/icon
import BrandFacebookSvgIcon from "./icons/PlasmicIcon__BrandFacebookSvg"; // plasmic-import: GvSU8apBIOau/icon
import BrandXSvgIcon from "./icons/PlasmicIcon__BrandXSvg"; // plasmic-import: vQLUlpGa4JFr/icon

createPlasmicElementProxy;

export type PlasmicSocialsComponent__VariantMembers = {};
export type PlasmicSocialsComponent__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialsComponent__VariantsArgs;
export const PlasmicSocialsComponent__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSocialsComponent__ArgsType = {};
type ArgPropType = keyof PlasmicSocialsComponent__ArgsType;
export const PlasmicSocialsComponent__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialsComponent__OverridesType = {
  root?: Flex__<"div">;
  text?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultSocialsComponentProps {
  className?: string;
}

const $$ = {};

function PlasmicSocialsComponent__RenderFunc(props: {
  variants: PlasmicSocialsComponent__VariantsArgs;
  args: PlasmicSocialsComponent__ArgsType;
  overrides: PlasmicSocialsComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_component_library_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_component_library_css.global_theme_finpac]: hasVariant(
            globalVariants,
            "theme",
            "finpac"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Connect With Us"}
      </div>
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Button
          className={classNames("__wab_instance", sty.button__sbUEs)}
          color={"transparent"}
          link={"https://www.instagram.com/finpacleasing/"}
          size={"minimal"}
        >
          <BrandInstagramSvgIcon
            className={classNames(projectcss.all, sty.svg__zWbl1)}
            role={"img"}
          />
        </Button>
        <Button
          className={classNames("__wab_instance", sty.button__x9YVc)}
          color={"transparent"}
          link={"https://www.linkedin.com/company/financial-pacific-leasing"}
          size={"minimal"}
        >
          <BrandLinkedinSvgIcon
            className={classNames(projectcss.all, sty.svg__tMq1K)}
            role={"img"}
          />
        </Button>
        <Button
          className={classNames("__wab_instance", sty.button__lpqQ4)}
          color={"transparent"}
          link={"https://www.facebook.com/FINPAC"}
          size={"minimal"}
        >
          <BrandFacebookSvgIcon
            className={classNames(projectcss.all, sty.svg__kzEel)}
            role={"img"}
          />
        </Button>
        <Button
          className={classNames("__wab_instance", sty.button___9SEaR)}
          color={"transparent"}
          link={"https://twitter.com/Finpacleasing"}
          size={"minimal"}
        >
          <BrandXSvgIcon
            className={classNames(projectcss.all, sty.svg__ofgql)}
            role={"img"}
          />
        </Button>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "freeBox"],
  text: ["text"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialsComponent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialsComponent__VariantsArgs;
    args?: PlasmicSocialsComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialsComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSocialsComponent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialsComponent__ArgProps,
          internalVariantPropNames: PlasmicSocialsComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialsComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialsComponent";
  } else {
    func.displayName = `PlasmicSocialsComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialsComponent = Object.assign(
  // Top-level PlasmicSocialsComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSocialsComponent
    internalVariantProps: PlasmicSocialsComponent__VariantProps,
    internalArgProps: PlasmicSocialsComponent__ArgProps
  }
);

export default PlasmicSocialsComponent;
/* prettier-ignore-end */
