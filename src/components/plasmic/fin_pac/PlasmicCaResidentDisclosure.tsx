// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 25NMkq6j3WJSA86YLeNnNv
// Component: VRsD0eEsuzxp

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import FullWidthSection from "../../FullWidthSection"; // plasmic-import: CmKNratQvH0p/component

import {
  ThemeValue,
  useTheme
} from "../component_library/PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_component_library_css from "../component_library/plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 25NMkq6j3WJSA86YLeNnNv/projectcss
import sty from "./PlasmicCaResidentDisclosure.module.css"; // plasmic-import: VRsD0eEsuzxp/css

createPlasmicElementProxy;

export type PlasmicCaResidentDisclosure__VariantMembers = {};
export type PlasmicCaResidentDisclosure__VariantsArgs = {};
type VariantPropType = keyof PlasmicCaResidentDisclosure__VariantsArgs;
export const PlasmicCaResidentDisclosure__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCaResidentDisclosure__ArgsType = {};
type ArgPropType = keyof PlasmicCaResidentDisclosure__ArgsType;
export const PlasmicCaResidentDisclosure__ArgProps = new Array<ArgPropType>();

export type PlasmicCaResidentDisclosure__OverridesType = {
  root?: Flex__<typeof FullWidthSection>;
  text?: Flex__<"div">;
  link?: Flex__<"a">;
};

export interface DefaultCaResidentDisclosureProps {
  className?: string;
}

const $$ = {};

function PlasmicCaResidentDisclosure__RenderFunc(props: {
  variants: PlasmicCaResidentDisclosure__VariantsArgs;
  args: PlasmicCaResidentDisclosure__ArgsType;
  overrides: PlasmicCaResidentDisclosure__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <FullWidthSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        <React.Fragment>
          <span
            className={"plasmic_default__all plasmic_default__span"}
            style={{ fontWeight: 700 }}
          >
            {"For CA Residents only"}
          </span>
          <React.Fragment>{": Please review our "}</React.Fragment>
          {
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                projectcss.plasmic_default__inline,
                sty.link
              )}
              href={
                "https://www.umpquabank.com/privacy/ca-privacy-notice-at-collection/"
              }
              platform={"react"}
            >
              {"California Privacy Notice at Collection"}
            </PlasmicLink__>
          }
          <React.Fragment>
            {
              " describing how we use the personal information we collect from you and how you can exercise your rights to privacy according to CA law."
            }
          </React.Fragment>
        </React.Fragment>
      </div>
    </FullWidthSection>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "link"],
  text: ["text", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof FullWidthSection;
  text: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCaResidentDisclosure__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCaResidentDisclosure__VariantsArgs;
    args?: PlasmicCaResidentDisclosure__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCaResidentDisclosure__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCaResidentDisclosure__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCaResidentDisclosure__ArgProps,
          internalVariantPropNames: PlasmicCaResidentDisclosure__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCaResidentDisclosure__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCaResidentDisclosure";
  } else {
    func.displayName = `PlasmicCaResidentDisclosure.${nodeName}`;
  }
  return func;
}

export const PlasmicCaResidentDisclosure = Object.assign(
  // Top-level PlasmicCaResidentDisclosure renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicCaResidentDisclosure
    internalVariantProps: PlasmicCaResidentDisclosure__VariantProps,
    internalArgProps: PlasmicCaResidentDisclosure__ArgProps
  }
);

export default PlasmicCaResidentDisclosure;
/* prettier-ignore-end */
