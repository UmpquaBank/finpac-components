// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: Fu9rYAdx7a38e3uUnu1ra
// Component: l-tgmR_s_IKQ

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0CdGcjBJJJ2u/component

import { useScreenVariants as useScreenVariantsh5TbtWCrTyJr } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: h5tbtWCrTyJR/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import sty from "./PlasmicSideBySide.module.css"; // plasmic-import: l-tgmR_s_IKQ/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: UBqKCOeBv1Lc/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: InBie9uiW3NB/icon

createPlasmicElementProxy;

export type PlasmicSideBySide__VariantMembers = {
  swapBoxContent: "swapBoxContent";
};
export type PlasmicSideBySide__VariantsArgs = {
  swapBoxContent?: SingleBooleanChoiceArg<"swapBoxContent">;
};
type VariantPropType = keyof PlasmicSideBySide__VariantsArgs;
export const PlasmicSideBySide__VariantProps = new Array<VariantPropType>(
  "swapBoxContent"
);

export type PlasmicSideBySide__ArgsType = {
  callToAction?: React.ReactNode;
  button?: React.ReactNode;
  backgroundColor?: string;
  imageUrl?: string;
};
type ArgPropType = keyof PlasmicSideBySide__ArgsType;
export const PlasmicSideBySide__ArgProps = new Array<ArgPropType>(
  "callToAction",
  "button",
  "backgroundColor",
  "imageUrl"
);

export type PlasmicSideBySide__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  freeBox?: Flex__<"div">;
};

export interface DefaultSideBySideProps {
  callToAction?: React.ReactNode;
  button?: React.ReactNode;
  backgroundColor?: string;
  imageUrl?: string;
  swapBoxContent?: SingleBooleanChoiceArg<"swapBoxContent">;
  className?: string;
}

const $$ = {};

function PlasmicSideBySide__RenderFunc(props: {
  variants: PlasmicSideBySide__VariantsArgs;
  args: PlasmicSideBySide__ArgsType;
  overrides: PlasmicSideBySide__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          backgroundColor: "#EDF2F4",
          imageUrl:
            "https://www.umpquabank.com/globalassets/media/navigation/hero-images/441x450_commercial_friendly_nav.jpg"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "swapBoxContent",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.swapBoxContent
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsh5TbtWCrTyJr(),
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_finpac]: hasVariant(
            globalVariants,
            "theme",
            "finpac"
          ),
          [sty.rootswapBoxContent]: hasVariant(
            $state,
            "swapBoxContent",
            "swapBoxContent"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns, {
          [sty.columnsswapBoxContent]: hasVariant(
            $state,
            "swapBoxContent",
            "swapBoxContent"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.column__huixu, {
            [sty.columnswapBoxContent__huixumaFpa]: hasVariant(
              $state,
              "swapBoxContent",
              "swapBoxContent"
            )
          })}
          style={(() => {
            try {
              return {
                backgroundImage: `url(${$props.imageUrl})`,
                backgroundPosition: "center",
                backgroundSize: "cover",
                backgroundRepeat: "no-repeat"
              };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <div
          className={classNames(projectcss.all, sty.column__anCtm, {
            [sty.columnswapBoxContent__anCtmmaFpa]: hasVariant(
              $state,
              "swapBoxContent",
              "swapBoxContent"
            )
          })}
          style={(() => {
            try {
              return { backgroundColor: $props.backgroundColor };
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__soyV7
                    )}
                  >
                    {"Call to Action"}
                  </h3>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aCi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3BSvU
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__slaWf
                        )}
                      >
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__p8LQ)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bJKis
                        )}
                      >
                        {
                          "Suspendisse quam urna, dapibus et scelerisque eget, facilisis eget magna."
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qQyz3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rZo1K
                        )}
                      >
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___117J4
                          )}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__juY6
                        )}
                      >
                        {
                          "Suspendisse quam urna, dapibus et scelerisque eget, facilisis eget magna."
                        }
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vp8ET)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__alNub
                        )}
                      >
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__wFbzX)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e4U0N
                        )}
                      >
                        {
                          "Suspendisse quam urna, dapibus et scelerisque eget, facilisis eget magna."
                        }
                      </div>
                    </div>
                  </Stack__>
                </React.Fragment>
              ),
              value: args.callToAction
            })}
            {renderPlasmicSlot({
              defaultContents: (
                <Button
                  className={classNames("__wab_instance", sty.button__eZelc)}
                />
              ),

              value: args.button
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "freeBox"],
  columns: ["columns", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBySide__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBySide__VariantsArgs;
    args?: PlasmicSideBySide__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideBySide__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSideBySide__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSideBySide__ArgProps,
          internalVariantPropNames: PlasmicSideBySide__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSideBySide__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBySide";
  } else {
    func.displayName = `PlasmicSideBySide.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBySide = Object.assign(
  // Top-level PlasmicSideBySide renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicSideBySide
    internalVariantProps: PlasmicSideBySide__VariantProps,
    internalArgProps: PlasmicSideBySide__ArgProps
  }
);

export default PlasmicSideBySide;
/* prettier-ignore-end */
