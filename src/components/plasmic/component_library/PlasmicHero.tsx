// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: Fu9rYAdx7a38e3uUnu1ra
// Component: 5OeiUkpsyy3G

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0CdGcjBJJJ2u/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import sty from "./PlasmicHero.module.css"; // plasmic-import: 5OeiUkpsyy3G/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: UBqKCOeBv1Lc/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: InBie9uiW3NB/icon

createPlasmicElementProxy;

export type PlasmicHero__VariantMembers = {};
export type PlasmicHero__VariantsArgs = {};
type VariantPropType = keyof PlasmicHero__VariantsArgs;
export const PlasmicHero__VariantProps = new Array<VariantPropType>();

export type PlasmicHero__ArgsType = {
  imageUrl?: string;
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHero__ArgsType;
export const PlasmicHero__ArgProps = new Array<ArgPropType>(
  "imageUrl",
  "children"
);

export type PlasmicHero__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultHeroProps {
  imageUrl?: string;
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicHero__RenderFunc(props: {
  variants: PlasmicHero__VariantsArgs;
  args: PlasmicHero__ArgsType;
  overrides: PlasmicHero__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          imageUrl:
            "https://img.plasmic.app/img-optimizer/v1/img?src=https%3A%2F%2Fimg.plasmic.app%2Fimg-optimizer%2Fv1%2Fimg%2F79bb49df845d1d3d88a4f892b4a66699.jpg"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_finpac]: hasVariant(
            globalVariants,
            "theme",
            "finpac"
          )
        }
      )}
      style={(() => {
        try {
          return {
            backgroundImage: `url(${$props.imageUrl})`,
            backgroundPosition: "center",
            backgroundSize: "cover",
            backgroundRepeat: "no-repeat"
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <div className={classNames(projectcss.all, sty.freeBox___0AfsJ)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rlDbu)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iyiHq
                )}
              >
                {"We are your equipment leasing partner in financing"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yiDnS
                )}
              >
                {
                  "Financial Pacific Leasing, Inc. is a direct provider of small-ticket commercial equipment leases."
                }
              </div>
              <Button
                className={classNames("__wab_instance", sty.button__klBbt)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zNCbF
                  )}
                >
                  {"Learn more"}
                </div>
              </Button>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xRbZf)}
            />
          </div>
        ),
        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHero__VariantsArgs;
    args?: PlasmicHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHero__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHero__ArgProps,
          internalVariantPropNames: PlasmicHero__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHero";
  } else {
    func.displayName = `PlasmicHero.${nodeName}`;
  }
  return func;
}

export const PlasmicHero = Object.assign(
  // Top-level PlasmicHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHero
    internalVariantProps: PlasmicHero__VariantProps,
    internalArgProps: PlasmicHero__ArgProps
  }
);

export default PlasmicHero;
/* prettier-ignore-end */
