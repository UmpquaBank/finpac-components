// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: Fu9rYAdx7a38e3uUnu1ra
// Component: CmKNratQvH0p

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: LpyY4FovdLdy/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: Fu9rYAdx7a38e3uUnu1ra/projectcss
import sty from "./PlasmicFullWidthSection.module.css"; // plasmic-import: CmKNratQvH0p/css

createPlasmicElementProxy;

export type PlasmicFullWidthSection__VariantMembers = {
  background: "_default" | "neutralLight";
};
export type PlasmicFullWidthSection__VariantsArgs = {
  background?: SingleChoiceArg<"_default" | "neutralLight">;
};
type VariantPropType = keyof PlasmicFullWidthSection__VariantsArgs;
export const PlasmicFullWidthSection__VariantProps = new Array<VariantPropType>(
  "background"
);

export type PlasmicFullWidthSection__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicFullWidthSection__ArgsType;
export const PlasmicFullWidthSection__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicFullWidthSection__OverridesType = {
  root?: Flex__<"section">;
};

export interface DefaultFullWidthSectionProps {
  children?: React.ReactNode;
  background?: SingleChoiceArg<"_default" | "neutralLight">;
  className?: string;
}

const $$ = {};

function PlasmicFullWidthSection__RenderFunc(props: {
  variants: PlasmicFullWidthSection__VariantsArgs;
  args: PlasmicFullWidthSection__ArgsType;
  overrides: PlasmicFullWidthSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "background",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.background
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_theme_finpac]: hasVariant(
            globalVariants,
            "theme",
            "finpac"
          ),
          [projectcss.global_theme_umpquaBank]: hasVariant(
            globalVariants,
            "theme",
            "umpquaBank"
          ),
          [sty.rootbackground__default]: hasVariant(
            $state,
            "background",
            "_default"
          ),
          [sty.rootbackground_neutralLight]: hasVariant(
            $state,
            "background",
            "neutralLight"
          )
        }
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Cy54
              )}
            >
              {"Main Header Text"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oKpv6
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus libero est, condimentum ut luctus eget, imperdiet sit amet magna. Donec tincidunt purus erat, eu vestibulum orci sollicitudin sed. Morbi rhoncus et eros non maximus. Cras consectetur enim sit amet erat molestie facilisis."
              }
            </div>
          </React.Fragment>
        ),
        value: args.children
      })}
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFullWidthSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFullWidthSection__VariantsArgs;
    args?: PlasmicFullWidthSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFullWidthSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFullWidthSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFullWidthSection__ArgProps,
          internalVariantPropNames: PlasmicFullWidthSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFullWidthSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFullWidthSection";
  } else {
    func.displayName = `PlasmicFullWidthSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFullWidthSection = Object.assign(
  // Top-level PlasmicFullWidthSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicFullWidthSection
    internalVariantProps: PlasmicFullWidthSection__VariantProps,
    internalArgProps: PlasmicFullWidthSection__ArgProps
  }
);

export default PlasmicFullWidthSection;
/* prettier-ignore-end */
